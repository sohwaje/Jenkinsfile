def useTest = true
def useBuild = true
def useDeploy = true
def remote = [:]
remote.name = "test"
remote.host = "ec2-55-333-222-111.ap-northeast-2.compute.amazonaws.com"
remote.allowAnyHosts = true

node('') {
	stage("Flow Check", {
		try {
			println "  TEST FLOW = $USE_TEST"
			useTest = "$USE_TEST" == "true"
		}
		catch (MissingPropertyException e) {
			println "  TEST FLOW = true"
		}

		try {
			println "  BUILD FLOW = $USE_BUILD"
			useBuild = "$USE_BUILD" == "true"
		}
		catch (MissingPropertyException e) {
			println "  BUILD FLOW = true"
		}

		try {
			println "   DEPLOY = $USE_DEPLOY"
			useDeploy = "$USE_DEPLOY" == "true"
		}
		catch (MissingPropertyException e) {
			println "   DEPLOY = true"
		}
	})

	stage("Parameter Check", {
		println "  GIT_URL = $GIT_URL"
		println "  BRANCH_SELECTOR = $BRANCH_SELECTOR"
		println "  JAVA_VERSION = $JAVA_VERSION"
		env.JAVA_HOME = "${tool name: JAVA_VERSION}"
		env.PATH = "${env.JAVA_HOME}/bin:${env.PATH}"

	})

	stage("Git CheckOut", {
		if (useTest || useBuild) {
			println "Git CheckOut Started"
			checkout(
					[
							$class                           : 'GitSCM',
							branches                         : [[name: '${BRANCH_SELECTOR}']],
							doGenerateSubmoduleConfigurations: false,
							// extensions                       : [],
							extensions                       : [[$class: 'CleanCheckout']],
							submoduleCfg                     : [],
							userRemoteConfigs                : [[url: '${GIT_URL}']]
					]
			)
			println "Git CheckOut End"
		} else {
			println "Git CheckOut Skip"
		}
	})


	stage('Test') {
		if (useTest) {
			println "Test Started"
			try {
				sh '/opt/maven/apache-maven-3.6.2/bin/mvn test'
				/* SLACK Configuration */
			} catch (Exception e) {
				println "Test End"
				throw e; /* 빌드 중단 */
			} finally {
//				junit '**/target/surefire-reports/TEST-*.xml'
			}
		} else {
			println "Test Skip"
		}
	}

	stage('Source Build') {
		if (useBuild) {
			println "Build Started"
			try {
				sh '/opt/maven/apache-maven-3.6.2/bin/mvn clean install'
				println "Build End"
				slackSend (channel: '##build-deploy', color: '#00FF00', message: "Build Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
			}
			catch (Exception e) {
			    slackSend (channel: '##build-deploy', color: '#FF0000', message: "Build failed:${e} Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
				throw e;  /* 빌드 중단 */
			}
		} else {
			println "Build Skip"
		}
	}


	stage('Deploy') {
		if (useDeploy) {
			println "Replace build number in yml"
			try {
				/* 배포 */
				withCredentials([sshUserPrivateKey(credentialsId: 'pdm-englishgo', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'ubuntu')]) {
					remote.user = ubuntu
					remote.identityFile = identity
					sshCommand remote: remote, command: 'cd /home/ubuntu/webapps/ROOT; rm -rf WEB-INF; jar -xvf *.war'
					sshPut remote: remote, from: 'target/', filterRegex: /.war$/, into: '/home/ubuntu/webapps/ROOT'
					sshCommand remote: remote, command: 'sudo service tomcat8 restart'
					slackSend (channel: '##build-deploy', color: '#00FF00', message: "Deploy Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
				}
			}
			catch (Exception e) {
				/* SLACK Configuration */
				slackSend (channel: '##build-deploy', color: '#FF0000', message: "Deploy Error:${e} Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
				throw e;  /* 빌드 중단 */
			}

		} else {
			println "Deploy Skip"
		}
	}
}
